From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aaron <bauhd@gmx.net>
Date: Tue, 9 Jul 2024 00:47:59 +0200
Subject: [PATCH] despigotization


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 7620c72a4c243cbeea245203ce03a97cbfa7d922..4ada08f7c8ee9226ee0f14b0d928b7bc00421822 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -237,11 +237,11 @@ public class TimingsExport extends Thread {
 
         // Information on the users Config
 
-        parent.put("config", createObject(
+        /*parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
-        ));
+        ));*/ // Grinder - despigotization
 
         new TimingsExport(listeners, parent, history).start();
     }
diff --git a/src/main/java/io/papermc/paper/brigadier/NullCommandSender.java b/src/main/java/io/papermc/paper/brigadier/NullCommandSender.java
index 367ef7e0769537e8c13c7fd818a1249e15a28a65..76a4de436ebad526411ea95aa066a1e5dddcafc9 100644
--- a/src/main/java/io/papermc/paper/brigadier/NullCommandSender.java
+++ b/src/main/java/io/papermc/paper/brigadier/NullCommandSender.java
@@ -3,7 +3,7 @@ package io.papermc.paper.brigadier;
 import java.util.Set;
 import java.util.UUID;
 import net.kyori.adventure.text.Component;
-import net.md_5.bungee.api.chat.BaseComponent;
+//import net.md_5.bungee.api.chat.BaseComponent; // Grinder - despigotization
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.CommandSender;
@@ -56,7 +56,7 @@ public final class NullCommandSender implements CommandSender {
         return "";
     }
 
-    private final Spigot spigot = new Spigot();
+    /*private final Spigot spigot = new Spigot();
     @Override
     public Spigot spigot() {
         return this.spigot;
@@ -79,7 +79,7 @@ public final class NullCommandSender implements CommandSender {
         @Override
         public void sendMessage(@Nullable final UUID sender, @NonNull final @NotNull BaseComponent... components) {
         }
-    }
+    }*/ // Grinder - despigotization
 
     @Override
     public Component name() {
diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index a9dd0e5216e95afd98fd2200d110e2cc0b1b0dca..85f5207a63a578f0ccf5e912db7e4023f521c9e4 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -129,6 +129,7 @@ public class GlobalConfiguration extends ConfigurationPart {
         public BungeeCord bungeeCord;
 
         public class BungeeCord extends ConfigurationPart {
+            public boolean enabled = false; // Grinder - despigotization
             public boolean onlineMode = true;
         }
 
@@ -156,7 +157,7 @@ public class GlobalConfiguration extends ConfigurationPart {
         }
         public boolean proxyProtocol = false;
         public boolean isProxyOnlineMode() {
-            return org.bukkit.Bukkit.getOnlineMode() || (org.spigotmc.SpigotConfig.bungee && this.bungeeCord.onlineMode) || (this.velocity.enabled && this.velocity.onlineMode);
+            return org.bukkit.Bukkit.getOnlineMode() || (this.bungeeCord.enabled && this.bungeeCord.onlineMode) || (this.velocity.enabled && this.velocity.onlineMode); // Grinder - despigotization
         }
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
index fdb75db02603ef97b624219211a0db22cd447dea..42f3dfa1be1e8408bc71dbaa830e37f94b08541e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
@@ -14,9 +14,9 @@ public record ClientboundSystemChatPacket(Component content, boolean overlay) im
     public static final StreamCodec<RegistryFriendlyByteBuf, ClientboundSystemChatPacket> STREAM_CODEC = StreamCodec.composite(ComponentSerialization.TRUSTED_STREAM_CODEC, ClientboundSystemChatPacket::content, ByteBufCodecs.BOOL, ClientboundSystemChatPacket::overlay, ClientboundSystemChatPacket::new);
 
     // Spigot start
-    public ClientboundSystemChatPacket(net.md_5.bungee.api.chat.BaseComponent[] content, boolean overlay) {
+    /*public ClientboundSystemChatPacket(net.md_5.bungee.api.chat.BaseComponent[] content, boolean overlay) {
         this(org.bukkit.craftbukkit.util.CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(content)), overlay);
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
     // Paper start
     public ClientboundSystemChatPacket(net.kyori.adventure.text.Component content, boolean overlay) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index ea71430fddf516671593ac2c071652a43233221a..5f7784b2bd6028027b4a27c696695659cad03f18 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -254,7 +254,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
                 DedicatedServer.LOGGER.error("**** INVALID CONFIGURATION!");
                 DedicatedServer.LOGGER.error("You are trying to use a Unix domain socket but you're not on a supported OS.");
                 return false;
-            } else if (!io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled && !org.spigotmc.SpigotConfig.bungee) {
+            } else if (!io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled && !io.papermc.paper.configuration.GlobalConfiguration.get().proxies.bungeeCord.enabled) { // Grinder - despigotization
                 DedicatedServer.LOGGER.error("**** INVALID CONFIGURATION!");
                 DedicatedServer.LOGGER.error("Unix domain sockets require IPs to be forwarded from a proxy.");
                 return false;
@@ -294,7 +294,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // CraftBukkit end
 
         // Paper start - Add Velocity IP Forwarding Support
-        boolean usingProxy = org.spigotmc.SpigotConfig.bungee || io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled;
+        boolean usingProxy = io.papermc.paper.configuration.GlobalConfiguration.get().proxies.bungeeCord.enabled || io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled; // Grinder - despigotization
         String proxyFlavor = (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) ? "Velocity" : "BungeeCord";
         String proxyLink = (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) ? "https://docs.papermc.io/velocity/security" : "http://www.spigotmc.org/wiki/firewall-guide/";
         // Paper end - Add Velocity IP Forwarding Support
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 064d52d4479727c6a32bf357be8da32d1760e7fc..7f174d449bcd7a6f350e97b976344f96faefad9c 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2434,7 +2434,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
                         String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
                         if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
-                            if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer().getName().equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) { // Spigot
+                            if (!io.papermc.paper.configuration.GlobalConfiguration.get().proxies.bungeeCord.enabled && originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer().getName().equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) { // Spigot // Grinder - despigotization
                                 ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
                                 return null;
                             }
@@ -2470,7 +2470,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
                 s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
                 if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
-                    if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) { // Spigot
+                    if (!io.papermc.paper.configuration.GlobalConfiguration.get().proxies.bungeeCord.enabled && originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) { // Spigot // Grinder - despigotization
                         ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
                         return;
                     }
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index cad3b8b326b3b9ca38e6892b3bc01e4b2d23999d..3cafc65919ecb0fcaa49c5d550bd47951a245bcf 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -131,7 +131,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
         } else {
             this.connection.setupInboundProtocol(LoginProtocols.SERVERBOUND, new ServerLoginPacketListenerImpl(this.server, this.connection, transfer));
             // Paper start - PlayerHandshakeEvent
-            boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee;
+            boolean proxyLogicEnabled = io.papermc.paper.configuration.GlobalConfiguration.get().proxies.bungeeCord.enabled; // Grinder - despigotization
             boolean handledByEvent = false;
             // Try and handle the handshake through the event
             if (com.destroystokyo.paper.event.player.PlayerHandshakeEvent.getHandlerList().getRegisteredListeners().length != 0) { // Hello? Can you hear me?
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a2ab3ee19f47b87cc5ec74aa5674b05841424529..ad2b8ddfd3eb29aeb90d2b5913f38f3ee5246d4d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -260,7 +260,7 @@ import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
-import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+//import net.md_5.bungee.api.chat.BaseComponent; // Spigot // Grinder - despigotization
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -891,7 +891,7 @@ public final class CraftServer implements Server {
     @Override
     public long getConnectionThrottle() {
         // Spigot Start - Automatically set connection throttle for bungee configurations
-        if (org.spigotmc.SpigotConfig.bungee || io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) { // Paper - Add Velocity IP Forwarding Support
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.bungeeCord.enabled || io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) { // Paper - Add Velocity IP Forwarding Support // Grinder - despigotization
             return -1;
         } else {
             return this.configuration.getInt("settings.connection-throttle");
@@ -2962,7 +2962,7 @@ public final class CraftServer implements Server {
     }
 
     // Spigot start
-    private final org.bukkit.Server.Spigot spigot = new org.bukkit.Server.Spigot()
+    /*private final org.bukkit.Server.Spigot spigot = new org.bukkit.Server.Spigot()
     {
 
         @Deprecated
@@ -3013,7 +3013,7 @@ public final class CraftServer implements Server {
     public org.bukkit.Server.Spigot spigot()
     {
         return this.spigot;
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 20225621093aa3e0aa3341b1f7c0ac031c7c16d0..c21b51c23c8b3395a40e57cccdbf2e9031b5b50f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2430,7 +2430,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     // Spigot start
-    private final org.bukkit.World.Spigot spigot = new org.bukkit.World.Spigot()
+    /*private final org.bukkit.World.Spigot spigot = new org.bukkit.World.Spigot()
     {
 
         @Override
@@ -2449,7 +2449,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public org.bukkit.World.Spigot spigot()
     {
         return this.spigot;
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
     // Paper start
     public java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen, boolean urgent) {
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
index 3e7d14564f11a3ed0b0766444e9d681804597e9a..db2e91d6f6245b17d5061e57b8b902fcc1bedfc4 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
@@ -140,10 +140,10 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
     }
 
     // Spigot start
-    @Override
+    /*@Override
     public org.bukkit.command.CommandSender.Spigot spigot()
     {
        return this.getCaller().spigot();
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index 1e3091687735b461d3b6a313ab8761127981d3e8..a1104b725d0bfbe4202072abe0c18153799864da 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -98,7 +98,7 @@ public abstract class ServerCommandSender implements CommandSender {
     }
 
     // Spigot start
-    private final org.bukkit.command.CommandSender.Spigot spigot = new org.bukkit.command.CommandSender.Spigot()
+    /*private final org.bukkit.command.CommandSender.Spigot spigot = new org.bukkit.command.CommandSender.Spigot()
     {
         @Override
         public void sendMessage(net.md_5.bungee.api.chat.BaseComponent component)
@@ -129,7 +129,7 @@ public abstract class ServerCommandSender implements CommandSender {
     public org.bukkit.command.CommandSender.Spigot spigot()
     {
         return this.spigot;
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
 
     // Paper start - implement pointers
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 89c8713d2c2206d1b0d8c0a392c9d13b3e736f0c..ca5d8f09e1b99b78381d669c4093618526498d69 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -58,7 +58,7 @@ import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
-import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+//import net.md_5.bungee.api.chat.BaseComponent; // Spigot // Grinder - despigotization
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -1086,7 +1086,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     // Paper end - more teleport API / async chunk API
 
     // Spigot start
-    private final org.bukkit.entity.Entity.Spigot spigot = new org.bukkit.entity.Entity.Spigot()
+    /*private final org.bukkit.entity.Entity.Spigot spigot = new org.bukkit.entity.Entity.Spigot()
     {
 
         @Override
@@ -1113,7 +1113,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public org.bukkit.entity.Entity.Spigot spigot()
     {
         return this.spigot;
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
 
     // Paper start - entity origin API
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
index e9f471e60af0725ec34e2985d63ae9ea9f88590a..9fe94bfa08aaf3399d2f4e7981ed10c3dfb68299 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
@@ -52,7 +52,7 @@ public class CraftLightningStrike extends CraftEntity implements LightningStrike
     }
 
     // Spigot start
-    private final LightningStrike.Spigot spigot = new LightningStrike.Spigot() {
+    /*private final LightningStrike.Spigot spigot = new LightningStrike.Spigot() {
 
         @Override
         public boolean isSilent()
@@ -64,7 +64,7 @@ public class CraftLightningStrike extends CraftEntity implements LightningStrike
     @Override
     public LightningStrike.Spigot spigot() {
         return this.spigot;
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 42d7660efe5baa6f796f2a7606686c765b6f2478..fff9d58a3df577e7cbde705f83410d66560371d5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -191,7 +191,7 @@ import org.bukkit.profile.PlayerProfile;
 import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
-import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+//import net.md_5.bungee.api.chat.BaseComponent; // Spigot // Grinder - despigotization
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
@@ -422,13 +422,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     // Paper start
-    @Override
+    /*@Override
     @Deprecated
     public void sendActionBar(BaseComponent[] message) {
         if (getHandle().connection == null) return;
         net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket packet = new net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket(org.bukkit.craftbukkit.util.CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(message)));
         getHandle().connection.send(packet);
-    }
+    }*/ // Grinder - despigotization
 
     @Override
     @Deprecated
@@ -444,7 +444,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         sendActionBar(org.bukkit.ChatColor.translateAlternateColorCodes(alternateChar, message));
     }
 
-    @Override
+    /*@Override
     public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
          if (header != null) {
              String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
@@ -467,7 +467,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void setPlayerListHeaderFooter(BaseComponent header, BaseComponent footer) {
         this.setPlayerListHeaderFooter(header == null ? null : new BaseComponent[]{header},
                 footer == null ? null : new BaseComponent[]{footer});
-    }
+    }*/ // Grinder - despigotization
 
 
     @Override
@@ -475,7 +475,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().connection.send(new ClientboundSetTitlesAnimationPacket(fadeInTicks, stayTicks, fadeOutTicks));
     }
 
-    @Override
+    /*@Override
     public void setSubtitle(BaseComponent[] subtitle) {
         final ClientboundSetSubtitleTextPacket packet = new ClientboundSetSubtitleTextPacket(org.bukkit.craftbukkit.util.CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(subtitle)));
         getHandle().connection.send(packet);
@@ -527,7 +527,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             setSubtitle(title.getSubtitle());
         }
         showTitle(title.getTitle());
-    }
+    }*/ // Grinder - despigotization
 
     @Override
     public void hideTitle() {
@@ -3376,7 +3376,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             return java.util.Collections.unmodifiableSet( ret );
         }
 
-        @Override
+        /*@Override
         public void sendMessage(BaseComponent component) {
           this.sendMessage( new BaseComponent[] { component } );
         }
@@ -3416,7 +3416,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             if ( CraftPlayer.this.getHandle().connection == null ) return;
 
             CraftPlayer.this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(components, position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR));
-        }
+        }*/ // Grinder - despigotization
 
         // Paper start
         @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 4abd939223a9d5a0c52a64e22c29fe1de85500e9..1fd37d09ba877b2f05da9256e36cb3724e43d825 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -249,7 +249,7 @@ public final class CraftItemFactory implements ItemFactory {
     // Paper end - add getI18NDisplayName
 
     // Paper start - bungee hover events
-    @Override
+    /*@Override
     public net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(ItemStack itemStack) {
         throw new UnsupportedOperationException("BungeeCord Chat API does not support data components");
         /*
@@ -259,7 +259,7 @@ public final class CraftItemFactory implements ItemFactory {
             itemStack.getAmount(),
             itemTag);
          */
-    }
+    /*}
 
     @Override
     public net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(org.bukkit.entity.Entity entity) {
@@ -285,7 +285,7 @@ public final class CraftItemFactory implements ItemFactory {
             entity.getType().getKey().toString(),
             entity.getUniqueId().toString(),
             new net.md_5.bungee.api.chat.TextComponent(customName));
-    }
+    }*/ // Grinder - despigotization
     // Paper end - bungee hover events
 
     // Paper start - old getSpawnEgg API
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index 70f20de37c1f8d57a8d9fe00dcd864fdd9948ec2..082109341c0fb75fb3f9a4d5123c302b9e050a7a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -23,10 +23,10 @@ import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.inventory.meta.WritableBookMeta;
 
 // Spigot start
-import java.util.AbstractList;
+/*import java.util.AbstractList;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.chat.ComponentSerializer;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftChatMessage;*/ // Grinder - despigotization
 // Spigot end
 
 @DelegateDeserialization(SerializableMeta.class)
@@ -377,7 +377,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta, WritableBo
         if (this.pages != null) {
             meta.pages = new ArrayList<String>(this.pages);
         }
-        meta.spigot = meta.new SpigotMeta(); // Spigot
+        //meta.spigot = meta.new SpigotMeta(); // Spigot // Grinder - despigotization
         return meta;
     }
 
@@ -420,7 +420,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta, WritableBo
     }
 
     // Spigot start
-    private BookMeta.Spigot spigot = new SpigotMeta();
+    /*private BookMeta.Spigot spigot = new SpigotMeta();
     private class SpigotMeta extends BookMeta.Spigot {
 
         private String pageToJSON(String page) {
@@ -505,6 +505,6 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta, WritableBo
     @Override
     public BookMeta.Spigot spigot() {
         return this.spigot;
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
index 040dac82e484cb44b3afd444b4bbd1fd994bfe7c..b9150516512e0cf1d7dfe26d8969b6ca21948217 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
@@ -22,9 +22,9 @@ import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.inventory.meta.BookMeta;
 
 // Spigot start
-import java.util.AbstractList;
+/*import java.util.AbstractList;
 import net.md_5.bungee.api.chat.BaseComponent;
-import net.md_5.bungee.chat.ComponentSerializer;
+import net.md_5.bungee.chat.ComponentSerializer;*/ // Grinder - despigotization
 // Spigot end
 
 @DelegateDeserialization(SerializableMeta.class)
@@ -298,7 +298,7 @@ public class CraftMetaBookSigned extends CraftMetaItem implements BookMeta {
         if (this.pages != null) {
             meta.pages = new ArrayList<Component>(this.pages);
         }
-        meta.spigot = meta.new SpigotMeta(); // Spigot
+        //meta.spigot = meta.new SpigotMeta(); // Spigot // Grinder - despigotization
         return meta;
     }
 
@@ -373,7 +373,7 @@ public class CraftMetaBookSigned extends CraftMetaItem implements BookMeta {
     }
 
     // Spigot start
-    private BookMeta.Spigot spigot = new SpigotMeta();
+    /*private BookMeta.Spigot spigot = new SpigotMeta();
     private class SpigotMeta extends BookMeta.Spigot {
 
         private String pageToJSON(Component page) {
@@ -457,7 +457,7 @@ public class CraftMetaBookSigned extends CraftMetaItem implements BookMeta {
     @Override
     public BookMeta.Spigot spigot() {
         return this.spigot;
-    }
+    }*/ // Grinder - despigotization
     // Spigot end
 
     // Paper start - adventure
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 60ec9b228518de0521b12f3f4ef26cb30260315a..22a2dca05c7a0f6d4c49ef25c6f2ca7f8c0be3c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -1033,10 +1033,10 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     // Paper start
-    @Override
+    /*@Override
     public net.md_5.bungee.api.chat.BaseComponent[] getDisplayNameComponent() {
         return displayName == null ? new net.md_5.bungee.api.chat.BaseComponent[0] : net.md_5.bungee.chat.ComponentSerializer.parse(CraftChatMessage.toJSON(displayName));
-    }
+    }*/ // Grinder - despigotization
     // Paper end
     @Override
     public final void setDisplayName(String name) {
@@ -1044,10 +1044,10 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     // Paper start
-    @Override
+    /*@Override
     public void setDisplayNameComponent(net.md_5.bungee.api.chat.BaseComponent[] component) {
         this.displayName = CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(component));
-    }
+    }*/ // Grinder - despigotization
     // Paper end
     @Override
     public boolean hasDisplayName() {
@@ -1224,12 +1224,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     // Paper start
-    @Override
+    /*@Override
     public List<net.md_5.bungee.api.chat.BaseComponent[]> getLoreComponents() {
         return this.lore == null ? null : new ArrayList<>(this.lore.stream().map(entry ->
             net.md_5.bungee.chat.ComponentSerializer.parse(CraftChatMessage.toJSON(entry))
         ).collect(java.util.stream.Collectors.toList()));
-    }
+    }*/ // Grinder - despigotization
     // Paper end
     @Override
     public void setLore(List<String> lore) {
@@ -1247,7 +1247,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     // Paper start
-    @Override
+    /*@Override
     public void setLoreComponents(List<net.md_5.bungee.api.chat.BaseComponent[]> lore) {
         Preconditions.checkArgument(lore == null || lore.size() <= ItemLore.MAX_LINES, "lore cannot have more than %s lines", ItemLore.MAX_LINES); // Paper - limit lore lines
         if (lore == null) {
@@ -1260,7 +1260,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
                 safelyAdd(lore, this.lore, false);
             }
         }
-    }
+    }*/ // Grinder - despigotization
     // Paper end
     @Override
     public boolean hasCustomModelData() {
@@ -2032,9 +2032,9 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
         for (Object object : addFrom) {
             // Paper start - support components
-            if(object instanceof net.md_5.bungee.api.chat.BaseComponent[] baseComponentArr) {
+            /*if(object instanceof net.md_5.bungee.api.chat.BaseComponent[] baseComponentArr) {
                 addTo.add(CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(baseComponentArr)));
-            } else
+            } else*/ // Grinder - despigotization
             // Paper end
             if (!(object instanceof String)) {
                 if (object != null) {
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 1be9ae5a9b571340426680a881e81f2ed656c5b6..8a7ba6f1d4e7a41e16fa8d521a2d2eb8f120b20c 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -32,7 +32,7 @@ public class SpigotConfig
 {
 
     private static File CONFIG_FILE;
-    private static final String HEADER = "This is the main configuration file for Spigot.\n"
+    private static final String HEADER = /*"This is the main configuration file for Spigot.\n"
             + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
             + "with caution, and make sure you know what each option does before configuring.\n"
             + "For a reference for any variable inside this file, check out the Spigot wiki at\n"
@@ -42,7 +42,7 @@ public class SpigotConfig
             + "join us at the Discord or drop by our forums and leave a post.\n"
             + "\n"
             + "Discord: https://www.spigotmc.org/go/discord\n"
-            + "Forums: http://www.spigotmc.org/\n";
+            + "Forums: http://www.spigotmc.org/\n"*/ ""; // Grinder - despigotization
     /*========================================================================*/
     public static YamlConfiguration config;
     static int version;
@@ -218,7 +218,7 @@ public class SpigotConfig
     public static boolean restartOnCrash = false;
     public static String restartScript = "./start.sh";
     public static String restartMessage;
-    private static void watchdog()
+    /*private static void watchdog()
     {
         SpigotConfig.timeoutTime = SpigotConfig.getInt( "settings.timeout-time", SpigotConfig.timeoutTime );
         SpigotConfig.restartOnCrash = SpigotConfig.getBoolean( "settings.restart-on-crash", SpigotConfig.restartOnCrash );
@@ -226,9 +226,9 @@ public class SpigotConfig
         //SpigotConfig.restartMessage = SpigotConfig.transform( SpigotConfig.getString( "messages.restart", "Server is restarting" ) ); // Grinder
         //SpigotConfig.commands.put( "restart", new RestartCommand( "restart" ) ); // Grinder
         // WatchdogThread.doStart( SpigotConfig.timeoutTime, SpigotConfig.restartOnCrash ); // Paper - moved to after paper config initialization
-    }
+    }*/ // Grinder - despigotization
 
-    public static boolean bungee;
+    /*public static boolean bungee;
     private static void bungee() {
         if ( SpigotConfig.version < 4 )
         {
@@ -236,7 +236,7 @@ public class SpigotConfig
             System.out.println( "Outdated config, disabling BungeeCord support!" );
         }
         SpigotConfig.bungee = SpigotConfig.getBoolean( "settings.bungeecord", false );
-    }
+    }*/ // Grinder - despigotization
 
     private static void nettyThreads()
     {
